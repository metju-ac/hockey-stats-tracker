@page "/"

@attribute [StreamRendering(true)]
@attribute [RenderModeServer]
@using HockeyStatsTracker.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient Http

<h1>Standings</h1>

<select @oninput="LoadSeasons">
    <option value="">Select a league</option>
    @if (leagues != null)
    {
        @foreach (var league in leagues)
        {
            <option value="@league.Id">@league.Name</option>
        }
    }
</select>

<select @onchange="LoadStandings">
    <option value="">Select a season</option>
    @if (seasons != null)
    {
        @foreach (var season in seasons)
        {
            <option value="@season.Id">@season.Name</option>
        }
    }
</select>

@if (standings != null)
{
    <QuickGrid Items="standings.AsQueryable()">
        <PropertyColumn Property="t => t.TeamName" Title="Team name"></PropertyColumn>
        <PropertyColumn Property="t => t.Wins" Title="W" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.OTWins" Title="OTW"Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.ShootoutWins" Title="SOW" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.ShootoutLosses" Title="SOL" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.OTLosses" Title="OTL" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.Losses" Title="L" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.GoalsFor" Title="GF" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.GoalsAgainst" Title="GA" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.Points" Title="Pts" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="t => t.GamesPlayed" Title="GP" Sortable="true"></PropertyColumn>
    </QuickGrid>
}

@code {
    private IEnumerable<LeagueFE> leagues;
    private IEnumerable<SeasonFE> seasons;
    private IEnumerable<TeamStandingFE> standings;

    protected override async Task OnInitializedAsync()
    {
        leagues = await Http.GetFromJsonAsync<IEnumerable<LeagueFE>>("api/Leagues");
    }

    private async Task LoadSeasons(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        var leagueId = int.Parse(e.Value.ToString());
        seasons = await Http.GetFromJsonAsync<IEnumerable<SeasonFE>>($"api/Seasons/league/{leagueId}");
    }

    private async Task LoadStandings(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        var seasonId = int.Parse(e.Value.ToString());
        standings = await Http.GetFromJsonAsync<IEnumerable<TeamStandingFE>>($"api/Teams/standings/season/{seasonId}");
    }

}