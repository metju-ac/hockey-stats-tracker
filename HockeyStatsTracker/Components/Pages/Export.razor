@page "/export"
@attribute [StreamRendering(true)]
@attribute [RenderModeServer]

@using HockeyStatsTracker.Models
@using HockeyStatsTracker.Services

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthService _authService;

<script>
    window.downloadFile = (filename, content) => {
        const blob = new Blob([content], { type: 'application/octet-stream' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = filename;

        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
</script>

<select @oninput="LoadSeasons">
    <option value="">Select a league</option>
    @if (leagues != null)
    {
        @foreach (var league in leagues)
        {
            <option value="@league.Id">@league.Name</option>
        }
    }
</select>

<select @onchange="SeasonSelected">
    <option value="">Select a season</option>
    @if (seasons != null)
    {
        @foreach (var season in seasons)
        {
            <option value="@season.Id">@season.Name</option>
        }
    }
</select>

@if (selectedSeasonId != -1)
{
    <br/>
    <button @onclick="DownloadData">Download</button>
}

@code {
    private IEnumerable<LeagueFE> leagues;
    private IEnumerable<SeasonFE> seasons;
    private int selectedSeasonId = -1;

    protected override async Task OnInitializedAsync()
    {
        if (!_authService.adminLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
        }

        leagues = await Http.GetFromJsonAsync<IEnumerable<LeagueFE>>("api/Leagues");
    }

    private async Task LoadSeasons(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        var leagueId = int.Parse(e.Value.ToString());
        seasons = await Http.GetFromJsonAsync<IEnumerable<SeasonFE>>($"api/Seasons/league/{leagueId}");
    }

    private void SeasonSelected(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        selectedSeasonId = int.Parse(e.Value.ToString());
    }

    private async Task DownloadData()
    {
        var response = await Http.GetAsync($"api/Export/season/{selectedSeasonId}", HttpCompletionOption.ResponseHeadersRead);
        var content = await response.Content.ReadAsStringAsync();

        await JSRuntime.InvokeVoidAsync("downloadFile", "data.json", content);
    }

}