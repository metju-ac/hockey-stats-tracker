@page "/edit/matches"

@attribute [StreamRendering(true)]
@attribute [RenderModeServer]
@using HockeyStatsTracker.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<script>
    window.downloadFile = (filename, content) => {
        const blob = new Blob([content], { type: 'application/octet-stream' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = filename;

        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
</script>

<h1>Edit matches</h1>

<button @onclick="DownloadData">Download Data</button>
<br/>

<select @oninput="LoadSeasons">
    <option value="">Select a league</option>
    @if (leagues != null)
    {
        @foreach (var league in leagues)
        {
            <option value="@league.Id">@league.Name</option>
        }
    }
</select>

<select @onchange="LoadMatches">
    <option value="">Select a season</option>
    @if (seasons != null)
    {
        @foreach (var season in seasons)
        {
            <option value="@season.Id">@season.Name</option>
        }
    }
</select>

@if (selectedSeasonId != 0)
{
    <br/>
    <button @onclick="AddMatch">Add match</button>
}

@if (matches == null)
{
    <p>No matches to display</p>
}
else
{
    foreach (var match in matches)
    {
        <p>
            @match.HomeTeam vs @match.AwayTeam - @match.HomeGoals:@match.AwayGoals @match.Suffix - @match.Date.ToShortDateString()
            <a href="edit/match/@match.Id">Edit match</a>
            <button @onclick="(() => DeleteMatch(match.Id))">Delete</button>
        </p>
    }
}

@code {
    private IEnumerable<LeagueFE> leagues;
    private IEnumerable<SeasonFE> seasons;
    private IEnumerable<MatchPreviewFE> matches;
    private int selectedSeasonId;

    protected override async Task OnInitializedAsync()
    {
        leagues = await Http.GetFromJsonAsync<IEnumerable<LeagueFE>>("api/Leagues");
    }

    private async Task LoadSeasons(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        var leagueId = int.Parse(e.Value.ToString());
        seasons = await Http.GetFromJsonAsync<IEnumerable<SeasonFE>>($"api/Seasons/league/{leagueId}");
    }

    private async Task LoadMatches(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        selectedSeasonId = int.Parse(e.Value.ToString());
        matches = await Http.GetFromJsonAsync<IEnumerable<MatchPreviewFE>>($"api/Matches/season/{selectedSeasonId}");
    }

    private async Task DeleteMatch(int matchId)
    {
        await Http.DeleteAsync($"api/Matches/{matchId}");
        await LoadMatches(new ChangeEventArgs { Value = selectedSeasonId });
    }

    private void AddMatch()
    {
        NavigationManager.NavigateTo($"/add/match/{selectedSeasonId}");
    }
    
    private async Task DownloadData()
    {
        var response = await Http.GetAsync("api/Export", HttpCompletionOption.ResponseHeadersRead);
        var content = await response.Content.ReadAsStringAsync();
        
        await JSRuntime.InvokeVoidAsync("downloadFile", "data.json", content);
    }

}