@page "/edit/match/{MatchId:int}"

@attribute [StreamRendering(true)]
@attribute [RenderModeServer]
@using HockeyStatsTracker.Models
@inject HttpClient Http

<h2>Match Details</h2>

@if (matchDetail == null)
{
    <p>Loading...</p>
}
else
{
    <h3>@matchDetail.HomeTeamName @matchDetail.HomeGoalsCount:@matchDetail.AwayGoalsCount @matchDetail.Suffix @matchDetail.AwayTeamName </h3>
    <p>Location: @matchDetail.Location</p>
    <p>Date: @matchDetail.Date.ToShortDateString()</p>
    
    <h4>@matchDetail.HomeTeamName goals</h4>
    foreach (var goal in matchDetail.HomeGoals)
    {
        <p>@goal.ScorerName
            @if (!string.IsNullOrEmpty(goal.Assister1Name) && !string.IsNullOrEmpty(goal.Assister2Name))
            {
                <text> (@goal.Assister1Name, @goal.Assister2Name)</text>
            }
            else if (!string.IsNullOrEmpty(goal.Assister1Name))
            {
                <text> (@goal.Assister1Name)</text>
            }
            - @goal.TimeScored <button @onclick="(() => DeleteGoal(goal.Id))">Delete</button>  
        </p>    
    }
    <button @onclick="(() => AddGoal())">Add Goal</button>
    
    <h4>@matchDetail.AwayTeamName goals</h4>
    foreach (var goal in matchDetail.AwayGoals)
    {
        <p>@goal.ScorerName
            @if (!string.IsNullOrEmpty(goal.Assister1Name) && !string.IsNullOrEmpty(goal.Assister2Name))
            {
                <text> (@goal.Assister1Name, @goal.Assister2Name)</text>
            }
            else if (!string.IsNullOrEmpty(goal.Assister1Name))
            {
                <text> (@goal.Assister1Name)</text>
            }
            - @goal.TimeScored <button @onclick="(() => DeleteGoal(goal.Id))">Delete</button>
        </p>    
    }
    
    <h4>@matchDetail.HomeTeamName penalties</h4>
    foreach (var penalty in matchDetail.HomePenalties)
    {
        <p>@penalty.PlayerName - @penalty.TimePenalty @penalty.PenaltyType @penalty.PenaltyMinutes:00
            <button @onclick="(() => DeletePenalty(penalty.Id))">Delete</button>
        </p>
    }
    
    <h4>@matchDetail.AwayTeamName penalties</h4>
    foreach (var penalty in matchDetail.AwayPenalties)
    {
        <p>@penalty.PlayerName - @penalty.TimePenalty @penalty.PenaltyType @penalty.PenaltyMinutes:00
            <button @onclick="(() => DeletePenalty(penalty.Id))">Delete</button>
        </p>
    }
    
}

@code {
    [Parameter]
    public int MatchId { get; set; }

    private MatchFE matchDetail;

    protected override async Task OnInitializedAsync()
    {
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
    }
    
    private async Task DeleteGoal(int goalId)
    {
        await Http.DeleteAsync($"api/Goals/{goalId}");
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
    }

    private async Task AddGoal()
    {
        Console.WriteLine("Adding goal");
    }
    
    private async Task DeletePenalty(int penaltyId)
    {
        await Http.DeleteAsync($"api/Penalties/{penaltyId}");
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
    }
}