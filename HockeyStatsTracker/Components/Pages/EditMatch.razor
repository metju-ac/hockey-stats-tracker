@page "/edit/match/{MatchId:int}"
@attribute [StreamRendering(true)]
@attribute [RenderModeServer]

@using DB.Models.Enums
@using HockeyStatsTracker.Models
@using HockeyStatsTracker.Services

@inject AuthService _authService;
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h2>Edit Match Details</h2>

@if (matchDetail == null)
{
    <p>Loading...</p>
}
else
{
    <h3>@matchDetail.HomeTeamName @matchDetail.HomeGoalsCount:@matchDetail.AwayGoalsCount @matchDetail.Suffix @matchDetail.AwayTeamName </h3>
    
    <div>
        <label for="location">Location:</label>
        <input id="location" type="text" @bind="matchDetail.Location" />
    </div>

    <div>
        <label for="date">Date:</label>
        <input id="date" type="date" @bind="matchDetail.Date" />
    </div>

    <div>
        <label for="matchResult">Match Result:</label>
        <select id="matchResult" @bind="matchDetail.MatchResult">
            @foreach (MatchResult matchResult in Enum.GetValues(typeof(MatchResult)))
            {
                <option value="@matchResult">@matchResult</option>
            }
        </select>
    </div>

    <button @onclick="SaveChanges">Save Changes</button>

    <h4>@matchDetail.HomeTeamName goals</h4>
    foreach (var goal in matchDetail.HomeGoals)
    {
        <p>
            @goal.ScorerName
            @if (!string.IsNullOrEmpty(goal.Assister1Name) && !string.IsNullOrEmpty(goal.Assister2Name))
            {
                <text> (@goal.Assister1Name, @goal.Assister2Name)</text>
            }
            else if (!string.IsNullOrEmpty(goal.Assister1Name))
            {
                <text> (@goal.Assister1Name)</text>
            }
            - @goal.TimeScored <button @onclick="(() => DeleteGoal(goal.Id))">Delete</button>
        </p>
    }

    <button @onclick="(() => AddHomeGoal())">Add Goal</button>

    @if (showAddHomeGoalForm)
    {
        <h3>Add Home Goal</h3>
        <div>
            <label for="scorerId">Scorer:</label>
            <select id="scorerId" @bind="newHomeGoal.ScorerId">
                @foreach (var player in HomeTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="assister1Id">Assister 1:</label>
            <select id="assister1Id" @bind="newHomeGoal.Assister1Id">
                <option value="">None</option>
                @foreach (var player in HomeTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="assister2Id">Assister 2:</label>
            <select id="assister2Id" @bind="newHomeGoal.Assister2Id">
                <option value="">None</option>
                @foreach (var player in HomeTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>
        
        <div>
            <label for="timeScored">Time Scored:</label>
            <input id="timeScored" type="text" @bind="newHomeGoal.TimeScored" />
        </div>

        <button @onclick="(() => SubmitHomeGoal())">Submit</button>
    }

    <h4>@matchDetail.AwayTeamName goals</h4>
    foreach (var goal in matchDetail.AwayGoals)
    {
        <p>
            @goal.ScorerName
            @if (!string.IsNullOrEmpty(goal.Assister1Name) && !string.IsNullOrEmpty(goal.Assister2Name))
            {
                <text> (@goal.Assister1Name, @goal.Assister2Name)</text>
            }
            else if (!string.IsNullOrEmpty(goal.Assister1Name))
            {
                <text> (@goal.Assister1Name)</text>
            }
            - @goal.TimeScored <button @onclick="(() => DeleteGoal(goal.Id))">Delete</button>
        </p>
    }
    
    <button @onclick="(() => AddAwayGoal())">Add Goal</button>
    
    @if (showAddAwayGoalForm)
    {
        <h3>Add Away Goal</h3>
        <div>
            <label for="scorerId">Scorer:</label>
            <select id="scorerId" @bind="newAwayGoal.ScorerId">
                @foreach (var player in AwayTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="assister1Id">Assister 1:</label>
            <select id="assister1Id" @bind="newAwayGoal.Assister1Id">
                <option value="">None</option>
                @foreach (var player in AwayTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="assister2Id">Assister 2:</label>
            <select id="assister2Id" @bind="newAwayGoal.Assister2Id">
                <option value="">None</option>
                @foreach (var player in AwayTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>
        
        <div>
            <label for="timeScored">Time Scored:</label>
            <input id="timeScored" type="text" @bind="newAwayGoal.TimeScored" />
        </div>

        <button @onclick="(() => SubmitAwayGoal())">Submit</button>
    }

    <h4>@matchDetail.HomeTeamName penalties</h4>
    foreach (var penalty in matchDetail.HomePenalties)
    {
        <p>
            @penalty.PlayerName - @penalty.TimePenalty @penalty.PenaltyType @penalty.PenaltyMinutes:00
            <button @onclick="(() => DeletePenalty(penalty.Id))">Delete</button>
        </p>
    }
    
    <button @onclick="(() => AddHomePenalty())">Add Penalty</button>
    
    @if (showAddHomePenaltyForm)
    {
        <h3>Add Home Penalty</h3>
        <div>
            <label for="playerId">Player:</label>
            <select id="playerId" @bind="newHomePenalty.PlayerId">
                @foreach (var player in HomeTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>
        
        <div>
            <label for="penaltyType">Penalty Type:</label>
            <select id="penaltyType" @bind="newHomePenalty.PenaltyTypeEnum">
                <option value=""></option>
                @foreach (PenaltyType penaltyType in Enum.GetValues(typeof(PenaltyType)))
                {
                    <option value="@penaltyType">@penaltyType</option>
                }
            </select>
        </div>
        
        <div>
            <label for="time">Time:</label>
            <input id="time" type="text" @bind="newHomePenalty.TimePenalty" />
        </div>

        <button @onclick="(() => SubmitHomePenalty())">Submit</button>
    }

    <h4>@matchDetail.AwayTeamName penalties</h4>
    foreach (var penalty in matchDetail.AwayPenalties)
    {
        <p>
            @penalty.PlayerName - @penalty.TimePenalty @penalty.PenaltyType @penalty.PenaltyMinutes:00
            <button @onclick="(() => DeletePenalty(penalty.Id))">Delete</button>
        </p>
    }
    
    <button @onclick="(() => AddAwayPenalty())">Add Penalty</button>
    
    @if (showAddAwayPenaltyForm)
    {
        <h3>Add Away Penalty</h3>
        <div>
            <label for="playerId">Player:</label>
            <select id="playerId" @bind="newAwayPenalty.PlayerId">
                @foreach (var player in AwayTeamPlayers)
                {
                    <option value="@player.Id">@player.Name</option>
                }
            </select>
        </div>
        
        <div>
            <label for="penaltyType">Penalty Type:</label>
            <select id="penaltyType" @bind="newAwayPenalty.PenaltyTypeEnum">
                <option value="">None</option>
                @foreach (PenaltyType penaltyType in Enum.GetValues(typeof(PenaltyType)))
                {
                    <option value="@penaltyType">@penaltyType</option>
                }
            </select>
        </div>
        
        <div>
            <label for="time">Time:</label>
            <input id="time" type="text" @bind="newAwayPenalty.TimePenalty" />
        </div>

        <button @onclick="(() => SubmitAwayPenalty())">Submit</button>
    }
}

@code {
    [Parameter] public int MatchId { get; set; }

    private MatchFE matchDetail;
    private IEnumerable<PlayerFE> HomeTeamPlayers;
    private IEnumerable<PlayerFE> AwayTeamPlayers;

    private GoalFE newHomeGoal = new GoalFE();
    private GoalFE newAwayGoal = new GoalFE();
    private bool showAddHomeGoalForm = false;
    private bool showAddAwayGoalForm = false;
    
    private PenaltyFE newHomePenalty = new PenaltyFE();
    private PenaltyFE newAwayPenalty = new PenaltyFE();
    private bool showAddHomePenaltyForm = false;
    private bool showAddAwayPenaltyForm = false;

    protected override async Task OnInitializedAsync()
    {
        if (!_authService.adminLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
        }
        
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
        HomeTeamPlayers = await Http.GetFromJsonAsync<IEnumerable<PlayerFE>>($"api/Players/team/{matchDetail.HomeTeamId}");
        AwayTeamPlayers = await Http.GetFromJsonAsync<IEnumerable<PlayerFE>>($"api/Players/team/{matchDetail.AwayTeamId}");
    }
    
    private async Task SaveChanges()
    {
        await Http.PutAsJsonAsync($"api/Matches/{matchDetail.Id}", matchDetail);
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{matchDetail.Id}");
    }

    private async Task AddHomeGoal()
    {
        showAddHomeGoalForm = true;
    }
    
    private async Task AddAwayGoal()
    {
        showAddAwayGoalForm = true;
    }

    private async Task SubmitHomeGoal()
    {

        await Http.PostAsJsonAsync($"api/Goals/home/{MatchId}", newHomeGoal);
        
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
        showAddHomeGoalForm = false;
        newHomeGoal = new GoalFE();
    }
    
    private async Task SubmitAwayGoal()
    {

        await Http.PostAsJsonAsync($"api/Goals/away/{MatchId}", newAwayGoal);
        
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
        showAddAwayGoalForm = false;
        newAwayGoal = new GoalFE();
    }
    
    private async Task DeleteGoal(int goalId)
    {
        await Http.DeleteAsync($"api/Goals/{goalId}");
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
    }
    
    private async Task AddHomePenalty()
    {
        showAddHomePenaltyForm = true;
    }
    
    private async Task AddAwayPenalty()
    {
        showAddAwayPenaltyForm = true;
    }
    
    private async Task SubmitHomePenalty()
    {

        await Http.PostAsJsonAsync($"api/Penalties/home/{MatchId}", newHomePenalty);
        
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
        showAddHomePenaltyForm = false;
        newHomePenalty = new PenaltyFE();
    }
    
    private async Task SubmitAwayPenalty()
    {

        await Http.PostAsJsonAsync($"api/Penalties/away/{MatchId}", newAwayPenalty);
        
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
        showAddAwayPenaltyForm = false;
        newAwayPenalty = new PenaltyFE();
    }

    private async Task DeletePenalty(int penaltyId)
    {
        await Http.DeleteAsync($"api/Penalties/{penaltyId}");
        matchDetail = await Http.GetFromJsonAsync<MatchFE>($"api/Matches/{MatchId}");
    }

}

