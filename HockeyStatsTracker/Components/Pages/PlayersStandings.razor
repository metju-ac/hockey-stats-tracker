@page "/players"

@attribute [StreamRendering(true)]
@attribute [RenderModeServer]
@using HockeyStatsTracker.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Players standings</h1>

<select @oninput="LoadSeasons">
    <option value="">Select a league</option>
    @if (leagues != null)
    {
        @foreach (var league in leagues)
        {
            <option value="@league.Id">@league.Name</option>
        }
    }
</select>

<select @onchange="LoadPlayerStandings">
    <option value="">Select a season</option>
    @if (seasons != null)
    {
        @foreach (var season in seasons)
        {
            <option value="@season.Id">@season.Name</option>
        }
    }
</select>

@if (standings != null)
{
    <QuickGrid Items="standings.AsQueryable()" Pagination="pagiantion">
        <PropertyColumn Property="p => p.PlayerName" Title="Player"></PropertyColumn>
        <PropertyColumn Property="p => p.TeamName" Title="Team"></PropertyColumn>
        <PropertyColumn Property="p => p.Goals" Title="G" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="p => p.Assists" Title="A" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="p => p.Points" Title="P" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="p => p.PenaltyMinutes" Title="PIM" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="p => p.GamesPlayed" Title="GP" Sortable="true"></PropertyColumn>
    </QuickGrid>
}

<Paginator State="@pagiantion"></Paginator>

@code {
    PaginationState pagiantion = new PaginationState { ItemsPerPage = 20 };
    
    private IEnumerable<LeagueFE> leagues;
    private IEnumerable<SeasonFE> seasons;
    private IEnumerable<PlayerStandingFE> standings;
    
    protected override async Task OnInitializedAsync()
    {
        leagues = await Http.GetFromJsonAsync<IEnumerable<LeagueFE>>("api/Leagues");
    }
    
    private async Task LoadSeasons(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        var leagueId = int.Parse(e.Value.ToString());
        seasons = await Http.GetFromJsonAsync<IEnumerable<SeasonFE>>($"api/Seasons/league/{leagueId}");
    }
    
    private async Task LoadPlayerStandings(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }

        var seasonId = int.Parse(e.Value.ToString());
        standings = await Http.GetFromJsonAsync<IEnumerable<PlayerStandingFE>>($"api/Players/season/{seasonId}");
    }

}