@page "/login"
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography
@using System.Text
@using DB.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Services
@inject HttpClient Http
@inject CustomAuthenticationStateProvider _authenticationStateProvider

<EditForm Model="@_loginModel" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText id="username" @bind-Value="_loginModel.Username" placeholder="Username"/>
    <InputText id="password" @bind-Value="_loginModel.Password" type="password" placeholder="Password"/>

    <button type="submit">Log in</button>

    @if (showLoginError)
    {
        <div class="alert alert-danger" role="alert">Invalid username or password.</div>
    }
</EditForm>

@code {
    [SupplyParameterFromForm] private LoginModel? _loginModel { get; set; }
    private bool showLoginError = false;

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Submitting login form");
        Console.WriteLine(_loginModel.Username);

        Console.WriteLine(_loginModel.Password);

        var response = await Http.PostAsJsonAsync("api/Auth/Login", _loginModel);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Login successful");
            _authenticationStateProvider.FakedAdminSignIn();
        }
        else
        {
            Console.WriteLine("Login failed");
            showLoginError = true;
            _loginModel = new LoginModel();
        }
    }

    protected override void OnInitialized() => _loginModel ??= new();
}