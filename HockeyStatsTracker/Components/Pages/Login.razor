@page "/login"
@attribute [StreamRendering(true)]
@attribute [RenderModeServer]

@using DB.Models
@using Services

@inject HttpClient Http
@inject AuthService _authService;
@inject NavigationManager NavManager

<EditForm Model="@_loginModel" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText id="username" @bind-Value="_loginModel.Username" placeholder="Username"/>
    <InputText id="password" @bind-Value="_loginModel.Password" type="password" placeholder="Password"/>

    <button type="submit">Log in</button>

    @if (showLoginError)
    {
        <div class="alert alert-danger" role="alert">Invalid username or password.</div>
    }
</EditForm>

@code {
    [SupplyParameterFromForm] private LoginModel? _loginModel { get; set; }
    private bool showLoginError = false;

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("api/Auth/Login", _loginModel);

        if (response.IsSuccessStatusCode)
        {
            _authService.adminLoggedIn = true;
            NavManager.NavigateTo("/");
        }
        else
        {
            showLoginError = true;
            _loginModel = new LoginModel();
        }
    }

    protected override void OnInitialized() => _loginModel ??= new();
}