@page "/matches"

@attribute [StreamRendering(true)]
@attribute [RenderModeServer]
@using HockeyStatsTracker.Models
@inject HttpClient Http

<h3>Matches</h3>

<select @oninput="LoadSeasons">
    <option value="">Select a league</option>
    @if (leagues != null)
    {
        @foreach (var league in leagues)
        {
            <option value="@league.Id">@league.Name</option>
        }
    }
</select>

<select @onchange="LoadMatches">
    <option value="">Select a season</option>
    @if (seasons != null)
    {
        @foreach (var season in seasons)
        {
            <option value="@season.Id">@season.Name</option>
        }
    }
</select>

@if (matches == null)
{
    <p>No matches to display</p>
}
else
{
    foreach (var match in matches)
    {
        <p>@match.HomeTeam vs @match.AwayTeam - @match.HomeGoals:@match.AwayGoals @match.Suffix - @match.Date.ToShortDateString()</p>
    }
}

@code {
    private IEnumerable<LeagueFE> leagues;
    private IEnumerable<SeasonFE> seasons;
    private IEnumerable<MatchResultFE> matches;

    protected override async Task OnInitializedAsync()
    {
        leagues = await Http.GetFromJsonAsync<IEnumerable<LeagueFE>>("api/Leagues");
    }
    
    private async Task LoadSeasons(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }
        var leagueId = int.Parse(e.Value.ToString());
        seasons = await Http.GetFromJsonAsync<IEnumerable<SeasonFE>>($"api/Seasons/league/{leagueId}");
    }
    
    private async Task LoadMatches(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "")
        {
            return;
        }
        var seasonId = int.Parse(e.Value.ToString());
        matches = await Http.GetFromJsonAsync<IEnumerable<MatchResultFE>>($"api/Matches/season/{seasonId}");
    }
}